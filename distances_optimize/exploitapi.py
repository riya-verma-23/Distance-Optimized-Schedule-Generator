import re
import distances 
from distances import Distance

api_calls = {}

def dict_to_JSON(r, locations):
		dist_str = r.json()["rows"][0]["elements"][0]["distance"]["text"]
		if(dist_str.find("km") == -1):
			num = re.findall('\d*\.?\d+',dist_str)
			num = float(num[0])*0.001
		else:
			num = re.findall('\d*\.?\d+',dist_str)
			num = float(num[0])
		# #order tuple (locations[i], locations[j]) alphabetically
		if (locations[0] < locations[1]):
			key = (locations[0].get_location(), locations[1].get_location())
		else:
			key = (locations[1].get_location(), locations[0].get_location())
		if key in api_calls: #finding the minimum distance between section A to section B and vice versa
			if num < api_calls[key]:
				api_calls[key] = num
		else: api_calls[key] = num
        
def get_distance(locations):
    file = Distance.distance_matrix_file(location1, location2)
    dict_to_JSON(file, location_list)

#read from a csv file and initlize a list of locations
def read_locations(file):
    location_list = []
    with open(file, 'r') as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            location_list.append(Location(row[0], row[1], row[2]))
    return location_list